import plotly.graph_objects as go
import numpy as np

# LATS = [39.6094856, 39.6094856, 39.6086845, 39.6077614, 39.608017, 39.608757]
# LONS = [-3.430547, -3.430547, -3.43145895, -3.4323709, -3.43223, -3.43099689]
# ALTS = [697.200012, 697.200012, 790.400024, 852.599976, 835.299988, 725.299988]

# LATS = [40.405124333, 40.405124333, 40.405124333, 40.4051245, 40.4051245, 40.4051245, 40.4051245, 40.405124333, 40.405124333, 40.4051245, 40.4051245, 40.405124333, 40.405124333, 40.405124333, 40.405124333, 40.405124333, 40.405124333, 40.405124333, 40.405124333, 40.405124333, 40.405124167, 40.405124167, 40.405124167, 40.405124167, 40.405124167, 40.405124, 40.405123833, 40.405123833, 40.405125667, 40.405127333, 40.4051275, 40.405127667, 40.4051275, 40.405126833, 40.405126167, 40.405126167, 40.405126333, 40.405129333, 40.405132833, 40.405132833, 40.4051325, 40.405133333, 40.405134167, 40.405136167, 40.405135333, 40.405134833, 40.405134667, 40.4051355, 40.4051335, 40.405132667, 40.405131833, 40.405132, 40.4051295, 40.405128333, 40.405123833, 40.405123167]
# LONS = [-3.7002555, -3.7002555, -3.7002555, -3.7002555, -3.7002555, -3.7002555, -3.700255667, -3.700255833, -3.700255667, -3.700255833, -3.700256, -3.700256167, -3.700256333, -3.700256667, -3.700256833, -3.700257, -3.700257167, -3.700257333, -3.700257667, -3.700257833, -3.700258, -3.700258167, -3.700258333, -3.7002585, -3.700258667, -3.700258833, -3.700259167, -3.700259333, -3.700259333, -3.700259833, -3.700259333, -3.7002595, -3.700259667, -3.700259667, -3.700260167, -3.7002605, -3.700260167, -3.700258667, -3.700256167, -3.700257333, -3.700257833, -3.7002565, -3.700256167, -3.700253667, -3.700254667, -3.700252, -3.700249833, -3.7002505, -3.7002495, -3.700250167, -3.700246833, -3.700246333, -3.700246333, -3.700244333, -3.700244333, -3.700245]
# LATS = [40.405339403333336, 40.40533947666667 , 40.40533955, 40.40533968166667 , 40.405339785      , 40.405339938333334, 40.40533995333333 , 40.40534005666667 , 40.40534004166667 , 40.405340286666664, 40.405340725      , 40.40534094       , 40.40534114333333 , 40.405341363333335, 40.405341535]
# LONS = [-3.700200908333333, -3.7002007983333334, -3.7002007133333334, -3.7002007733333335, -3.7002007266666666, -3.7002008833333333, -3.700200885, -3.700201048333333, -3.700201026666667, -3.700201118333333, -3.7002011533333334, -3.700201305, -3.700201415, -3.70020166, -3.7002018850000002]
# ALTS = [650]*len(LATS)



data_dict = {
    "3D Positional Accuracy (mm)": [
        9240, 9245, 9240, 9230, 9226, 9231, 9222, 9202, 9168, 9138, 9082, 8995, 8888, 8780, 8685, 8594, 8514, 8447, 8368, 8297,
        8236, 8169, 8131, 8047, 8052, 8200, 8287, 8388, 8456, 8509, 8555, 8597, 8659, 8711, 8776, 8783, 8623, 8576, 8719, 8683,
        8564, 8309, 7756, 7372, 7162, 6978, 6775, 6563, 6383, 6193, 6013, 5882, 5746, 5616, 5505, 5448, 5401, 5338, 5272, 5189,
        5101, 5066, 5007, 4842, 4681, 4540, 4422, 4325, 4229, 4156, 4112, 4067, 4018, 3983, 3962, 3927, 3900, 3867, 3834, 3807,
        3795, 3793, 3781, 3767, 3768, 3779, 3791, 3801, 3817, 3829, 3846, 3859, 3855, 3846, 3845, 3856, 3870, 3885, 3890, 3889,
        3896, 3895, 3893, 3899, 3907, 3922, 3938, 3944, 3952, 3949, 3940, 3941, 3943, 3944, 3938, 3929, 3926, 3958, 4053, 4160,
        4331, 4256, 4288, 4324, 4271, 4210, 4090, 3937, 3808, 3665, 3554, 3457, 3361, 3290, 3221, 3180, 3170, 3220, 3223, 3254,
        3328, 3380, 3566, 3805, 3979, 4190
    ],
    "Lat (degrees)": [
        40405321, 40405321, 40405321, 40405322, 40405322, 40405322, 40405322, 40405322, 40405321, 40405321, 40405320, 40405335, 40405334, 40405332, 40405331, 40405330, 40405330, 40405329, 40405328, 40405328,
        40405343, 40405343, 40405343, 40405343, 40405328, 40405343, 40405343, 40405342, 40405341, 40405339, 40405338, 40405337, 40405336, 40405336, 40405351, 40405350, 40405349, 40405350, 40405354, 40405362,
        40405361, 40405357, 40405350, 40405342, 40405329, 40405333, 40405322, 40405326, 40405315, 40405318, 40405305, 40405307, 40405306, 40405304, 40405304, 40405304, 40405318, 40405318, 40405316, 40405318,
        40405318, 40405319, 40405305, 40405311, 40405298, 40405300, 40405301, 40405302, 40405288, 40405289, 40405289, 40405289, 40405290, 40405290, 40405291, 40405292, 40405293, 40405293, 40405294, 40405294,
        40405294, 40405295, 40405280, 40405280, 40405281, 40405281, 40405281, 40405282, 40405283, 40405283, 40405283, 40405284, 40405284, 40405285, 40405285, 40405285, 40405286, 40405286, 40405286, 40405286,
        40405285, 40405285, 40405284, 40405283, 40405282, 40405282, 40405282, 40405282, 40405281, 40405281, 40405281, 40405280, 40405280, 40405295, 40405295, 40405295, 40405280, 40405281, 40405282, 40405282,
        40405282, 40405283, 40405272, 40405273, 40405286, 40405283, 40405295, 40405290, 40405303, 40405288, 40405298, 40405307, 40405316, 40405326, 40405324, 40405323, 40405326, 40405313, 40405327, 40405316,
        40405319, 40405305, 40405318, 40405326
    ],
    "Long (degrees)": [
        -3700362, -3700376, -3700374, -3700374, -3700375, -3700374, -3700375, -3700361, -3700376, -3700361, -3700362, -3700365, -3700353, -3700355, -3700358, -3700360, -3700346, -3700350, -3700337, -3700341,
        -3700343, -3700329, -3700329, -3700329, -3700332, -3700331, -3700335, -3700322, -3700324, -3700324, -3700322, -3700336, -3700334, -3700321, -3700326, -3700313, -3700322, -3700333, -3700341, -3700330,
        -3700331, -3700344, -3700339, -3700352, -3700350, -3700337, -3700340, -3700342, -3700344, -3700330, -3700331, -3700332, -3700344, -3700340, -3700339, -3700339, -3700337, -3700337, -3700352, -3700342,
        -3700342, -3700329, -3700335, -3700314, -3700307, -3700312, -3700302, -3700290, -3700295, -3700283, -3700286, -3700274, -3700277, -3700280, -3700267, -3700269, -3700270, -3700272, -3700257, -3700258,
        -3700259, -3700260, -3700261, -3700261, -3700262, -3700263, -3700264, -3700249, -3700249, -3700250, -3700250, -3700251, -3700252, -3700253, -3700253, -3700253, -3700253, -3700253, -3700253, -3700253,
        -3700254, -3700256, -3700241, -3700243, -3700244, -3700245, -3700247, -3700248, -3700234, -3700236, -3700238, -3700240, -3700225, -3700226, -3700227, -3700225, -3700239, -3700236, -3700236, -3700233,
        -3700241, -3700253, -3700263, -3700269, -3700268, -3700274, -3700284, -3700287, -3700276, -3700276, -3700276, -3700278, -3700278, -3700280, -3700280, -3700281, -3700282, -3700282, -3700283, -3700284,
        -3700285, -3700285, -3700286, -3700287
    ]
}


LATS = [i / 1000000 for i in data_dict["Lat (degrees)"]]
LONS = [i / 1000000 for i in data_dict["Long (degrees)"]]
ALTS = [650]*len(LATS)


# LATS = [ (i - 40.405124333)*100 for i in LATS]
# LONS = [ (i + 3.7002555)*100 for i in LONS]


# Define colors for each segment
colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF']

# Generate a list of indices for coloring segments
color_indices = []
for i in range(len(LATS) - 1):
    color_indices.extend([i, i])
color_indices.append(len(LATS) - 2)  # Ensure the last point gets a color

# Create a custom color scale based on the provided colors
custom_colorscale = []
for i, color in enumerate(colors):
    custom_colorscale.append([i / (len(colors) - 1), color])
    custom_colorscale.append([(i + 1) / (len(colors) - 1), color])

# Create the figure with one trace
fig = go.Figure(go.Scattermapbox(
    mode="lines+markers",
    lon=LONS,
    lat=LATS,
    marker=dict(size=10, color="#AAAAAA"),
    line=dict(width=2),  # Transparent line color initially
    customdata=color_indices,  # Use customdata for color indexing
    hoverinfo='none'
))

# Add a colorbar and custom color scale to simulate segment coloring
# fig.update_traces(line=dict(color='customdata'))

# Update the layout
fig.update_layout(
    margin={'l': 0, 't': 0, 'b': 0, 'r': 0},
    mapbox={
        'center': {'lon': (max(LONS) + min(LONS)) / 2.0, 'lat': (max(LATS) + min(LATS)) / 2.0},
        'style': "open-street-map",
        'zoom': 15
    },
    coloraxis_colorbar=dict(
        title="Segments",
        tickvals=list(range(len(colors))),
        ticktext=['Segment {}'.format(i + 1) for i in range(len(colors))],
    )
)

# Show the figure
# fig.show()

a = fig.to_html()
open("index4.html", "wb").write(bytes(a, "utf-8"))
